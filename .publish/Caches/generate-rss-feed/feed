{"itemCount":2,"config":{"ttlInterval":250,"maximumItemCount":100,"targetPath":"feed.rss"},"feed":"<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:atom=\"http:\/\/www.w3.org\/2005\/Atom\" xmlns:content=\"http:\/\/purl.org\/rss\/1.0\/modules\/content\"><channel><title>overdesigned blog<\/title><description>A blog by Adam Overholtzer<\/description><link>https:\/\/blog.overdesigned.net<\/link><language>en<\/language><lastBuildDate>Thu, 26 Aug 2021 10:51:41 -0700<\/lastBuildDate><pubDate>Thu, 26 Aug 2021 10:51:41 -0700<\/pubDate><ttl>250<\/ttl><atom:link href=\"https:\/\/blog.overdesigned.net\/feed.rss\" rel=\"self\" type=\"application\/rss+xml\"\/><item><guid isPermaLink=\"true\">https:\/\/blog.overdesigned.net\/posts\/2021-09-01-catalyst-status-menu<\/guid><title>Standalone Status Menu in a Mac Catalyst App<\/title><description>How to create a standalone “status menu” app and embed it in your Mac Catalyst app.<\/description><link>https:\/\/blog.overdesigned.net\/posts\/2021-09-01-catalyst-status-menu<\/link><pubDate>Wed, 1 Sep 2021 09:41:00 -0700<\/pubDate><content:encoded><![CDATA[<h1>Standalone Status Menu in a Mac Catalyst App<\/h1><figure><img src=\"https:\/\/blog.overdesigned.net\/images\/cheatsheet-menu.jpg\" srcset=\"\/images\/cheatsheet-menu.jpg 2x\" alt=\"Screenshot of Cheatsheet’s status menu\" \/><\/figure><p>I make a somewhat successful app called <a href=\"https:\/\/itunes.apple.com\/app\/id1468213484\">Cheatsheet<\/a>, which is available for iOS, watchOS, and — thanks to Catalyst — macOS. Cheatsheet makes it easy to get to your notes from anywhere, which means widgets and custom keyboards on iOS and complications on watchOS. On macOS, Cheatsheet has a <em>status menu app<\/em>.<\/p><p>Look up at the righthand side of a Mac’s menu bar and you’ll see a row of icons called <strong>status menus<\/strong>. Several status menus are provided by macOS, such as the Wi-Fi and Volume controls. Third-party apps can also create status menus to provide easy, always-available access to app features.<\/p><p>In this post, I will walk you through creating a <strong>status menu app<\/strong> — a small Mac app that runs separately from its parent app — and embedding it in a Mac Catalyst app. The parent app will have a checkbox that shows or hides the status menu, and clicking the status menu icon will show a popover.<\/p><figure><img src=\"https:\/\/blog.overdesigned.net\/images\/status-menu-example.jpg\" alt=\"Screenshot of my sample app and status menu\" \/><\/figure><h2>Create the Status Menu App<\/h2><p>Let’s start with the fun part: building the status menu app. We’ll build this new app with AppKit and SwiftUI, not iOS or Catalyst. Don’t fret if you’re new to AppKit — I’ll give you what you need, and then you can build the rest of your interface with SwiftUI.<\/p><p>To begin, select your project and add a new <strong>Mac App<\/strong> target.<\/p><figure><img src=\"https:\/\/blog.overdesigned.net\/images\/menu-mac-app.png\" srcset=\"\/images\/menu-mac-app.png 2x\" alt=\"Screenshot of a Xcode’s Add Target window\" \/><\/figure><p>Then in the “Choose options for your new target” screen, select <strong>Interface: SwiftUI<\/strong> and <strong>Life Cycle: AppKit App Delegate<\/strong>. We need the AppDelegate so we can create a windowless app, which is <em>technically<\/em> possible with the SwiftUI life cycle but it’s a bit of a <a href=\"https:\/\/github.com\/zaferarican\/menubarpopoverswiftui2\">hack<\/a> and still requires an app delegate.<\/p><figure><img src=\"https:\/\/blog.overdesigned.net\/images\/menu-life-cycle.png\" srcset=\"\/images\/menu-life-cycle.png 2x\" alt=\"Screenshot of a Xcode’s Choose options for your new target window\" \/><\/figure><p>Enter a <strong>Product Name<\/strong> and click <strong>Finish<\/strong>.<\/p><p>Now select your new target and switch to its <strong>Info<\/strong> tab. Add a new property: <strong>Application is agent (UIElement)<\/strong>. Set its value to <strong>YES<\/strong>. This cryptically-named property tells macOS to run your app as an “agent”, which means it won’t appear in the Dock or the Force Quit window.<\/p><figure><img src=\"https:\/\/blog.overdesigned.net\/images\/menu-uielement.png\" srcset=\"\/images\/menu-uielement.png 2x\" alt=\"Screenshot of the Info tab of our new target in Xcode\" \/><\/figure><p>With that out of the way, we’re ready to code! In the project navigator, open your new target’s <strong>AppDelegate.swift<\/strong> and look for <code>applicationDidFinishLaunching<\/code>. It will contain a bunch of code creating a window — delete all of that and replace it with this:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-comment\">\/\/ AppDelegate.swift<\/span>\n\n<span class=\"hljs-meta\">@NSApplicationMain<\/span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">AppDelegate<\/span>: <span class=\"hljs-title\">NSObject<\/span>, <span class=\"hljs-title\">NSApplicationDelegate<\/span> <\/span>{\n    \n    <span class=\"hljs-keyword\">var<\/span> statusItem : <span class=\"hljs-type\">NSStatusItem!<\/span>\n    <span class=\"hljs-keyword\">var<\/span> popover : <span class=\"hljs-type\">NSPopover!<\/span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">applicationDidFinishLaunching<\/span><span class=\"hljs-params\">(<span class=\"hljs-number\">_<\/span> aNotification: Notification)<\/span><\/span> {\n\n        <span class=\"hljs-comment\">\/\/ Create the status item<\/span>\n        statusItem = <span class=\"hljs-type\">NSStatusBar<\/span>.system.statusItem(withLength: <span class=\"hljs-type\">NSStatusItem<\/span>.variableLength)\n        <span class=\"hljs-keyword\">if<\/span> <span class=\"hljs-keyword\">let<\/span> statusButton = statusItem?.button {\n            statusButton.image = <span class=\"hljs-type\">NSImage<\/span>(systemSymbolName: <span class=\"hljs-string\">\"tornado\"<\/span>, accessibilityDescription: <span class=\"hljs-literal\">nil<\/span>)\n            statusButton.action = #selector(togglePopover(sender:))\n            statusButton.target = <span class=\"hljs-keyword\">self<\/span>\n        }\n        \n        <span class=\"hljs-comment\">\/\/ Create the popover<\/span>\n        popover = <span class=\"hljs-type\">NSPopover<\/span>()\n        <span class=\"hljs-keyword\">let<\/span> content = <span class=\"hljs-type\">NSHostingController<\/span>(rootView: <span class=\"hljs-type\">ContentView<\/span>())\n        popover.contentViewController = content\n        popover.contentSize = content.view.intrinsicContentSize\n        popover.behavior = .transient\n        popover.animates = <span class=\"hljs-literal\">false<\/span>\n    }\n}\n<\/code><\/pre><p>This code does two things:<\/p><ol><li>Creates a new <code>NSStatusItem<\/code> in the system status bar. Status items can have either a drop-down menu or a button; we’ll create a button with a tornado icon that displays a popover when clicked.<\/li><li>Creates an <code>NSPopover<\/code> with a SwiftUI view. We set the popover’s <code>behavior<\/code> to <code>.transient<\/code>, which means the popover closes if you click anywhere outside of it, and <code>animates<\/code> to <em>false<\/em> because I find the default open\/close animations to be frustratingly slow. We also set the popover’s <code>contentSize<\/code> here using the SwiftUI view’s <code>intrinsicContentSize<\/code> — ideally, SwiftUI would size the popover for us, but in my testing it seems we need to set the <code>contentSize<\/code> before we try to show the popover.<\/li><\/ol><p>Now all we need is to add <code>togglePopover(sender:)<\/code> to <strong>AppDelegate.swift<\/strong>:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-comment\">\/\/ AppDelegate.swift<\/span>\n\n<span class=\"hljs-meta\">@objc<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">togglePopover<\/span><span class=\"hljs-params\">(sender: <span class=\"hljs-keyword\">Any<\/span>?)<\/span><\/span> {\n    <span class=\"hljs-keyword\">guard<\/span> <span class=\"hljs-keyword\">let<\/span> statusButton = statusItem.button <span class=\"hljs-keyword\">else<\/span> { <span class=\"hljs-keyword\">return<\/span> }\n    \n    <span class=\"hljs-keyword\">if<\/span> popover.isShown {\n        popover.performClose(sender)\n    } <span class=\"hljs-keyword\">else<\/span> {\n        popover.show(relativeTo: statusButton.bounds,\n                     of: statusButton,\n                     preferredEdge: <span class=\"hljs-type\">NSRectEdge<\/span>.maxY)\n    }\n}\n<\/code><\/pre><p>This shows the popover relative to the status item, or closes the popover if it’s already showing.<\/p><p>At this point, you should be able to <strong>Run<\/strong> your status menu target. The little tornado icon should appear in the menu bar, and clicking it should show a popover.<\/p><h2>Embed the Status Menu App in the Catalyst App<\/h2><p>Now let’s switch back to our main target, which is our Mac Catalyst app. We need to <em>embed<\/em> our status menu app in our Catalyst app, which first means adding the status menu as a dependency of our Catalyst app.<\/p><p>Go to the Catalyst target’s <strong>Build Phases<\/strong> tab and open <strong>Dependencies<\/strong>. Click the plus button and choose the status menu app’s target. Then click the <strong>Platforms<\/strong> drop-down next to the added dependency and select <strong>macOS<\/strong> — this tells Xcode to only build the status menu for the Catalyst version of our app.<\/p><figure><img src=\"https:\/\/blog.overdesigned.net\/images\/menu-dependencies.png\" srcset=\"\/images\/menu-dependencies.png 2x\" alt=\"Screenshot of our main target’s Build Phases > Dependencies in Xcode\" \/><\/figure><p>Now to actually embed the status menu app. Click the plus button at the top of the <strong>Build Phases<\/strong> tab and select <strong>New Copy Files Phase<\/strong>. Expand the new “Copy Phase”, rename it to “Copy Status Menu”, and set its <strong>Destination<\/strong> to <code>Wrapper<\/code> and <strong>Subpath<\/strong> to <code>Contents\/Library\/LoginItems<\/code>. Click the plus button to add your status menu app’s product (it should have a name like <code>Your_Status_Menu_Target.app<\/code>); then in the <strong>Platforms<\/strong> drop-down, select <strong>macOS<\/strong>.<\/p><figure><img src=\"https:\/\/blog.overdesigned.net\/images\/menu-copy-phase.png\" srcset=\"\/images\/menu-copy-phase.png 2x\" alt=\"Screenshot of our Copy Files build phase in Xcode\" \/><\/figure><p>Now <strong>Run<\/strong> your Catalyst app. It should compile and run, but you won’t see the status menu. The final step is to implement the method for enabling the status menu.<\/p><h2>Set the Status Menu App as a Login Item<\/h2><p>We are going to set your embedded status menu app as a <strong>login item<\/strong>, which will launch the app immediately <em>and<\/em> relaunch it every time the Mac is restarted. This will be the ugliest step, for two reasons:<\/p><ol><li>The method is a C function. Not an Objective-C function — it’s straight C.<\/li><li>The method is marked <code>unavailable<\/code> in Catalyst.<\/li><\/ol><p>But don’t worry — issue number one means that issue number two is quite easy to solve!<\/p><ol><li>Define SMLoginItemSetEnabled in bridging header<\/li><li>Create StatusMenuHelper<\/li><li>Wire-up UI<\/li><\/ol><p>And we’re done!<\/p><blockquote class=\"twitter-tweet\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">that’s a good question for <a href=\"https:\/\/twitter.com\/aoverholtzer?ref_src=twsrc%5Etfw\">@aoverholtzer<\/a>, who’s done exactly that in <a href=\"https:\/\/twitter.com\/cheatsheet_app?ref_src=twsrc%5Etfw\">@cheatsheet_app<\/a><\/p>&mdash; Steve Troughton-Smith (@stroughtonsmith) <a href=\"https:\/\/twitter.com\/stroughtonsmith\/status\/1429970709791522817?ref_src=twsrc%5Etfw\">August 24, 2021<\/a><\/blockquote><script async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script><h2>What is a Status Menu?<\/h2><figure><img src=\"https:\/\/blog.overdesigned.net\/images\/status-menu-help.png\" srcset=\"\/images\/status-menu-help.png 2x\" alt=\"Screenshot of a status menu, courtesy of https:\/\/support.apple.com\/guide\/mac-help\/menu-bar-mchlp1446\/mac\" \/><\/figure><p>Embedding a status menu app in a Catalyst app is a bit of a trick, and <a href=\"https:\/\/twitter.com\/stroughtonsmith\/status\/1429970709791522817?ref_src=twsrc%5Etfw\">apparently<\/a> folks want to know how I did it. Here’s how!<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">https:\/\/blog.overdesigned.net\/posts\/2020-09-23-swiftui-availability<\/guid><title>SwiftUI View Modifiers and if #available<\/title><description>Doing availability checks with SwiftUI's declarative syntax can be a little messy. Here's a custom view modifier that can help.<\/description><link>https:\/\/blog.overdesigned.net\/posts\/2020-09-23-swiftui-availability<\/link><pubDate>Wed, 23 Sep 2020 09:41:00 -0700<\/pubDate><content:encoded><![CDATA[<h1>SwiftUI View Modifiers and <code>if #available<\/code><\/h1><h2>tl;dr<\/h2><p>Here is a view modifier that lets you run arbitrary code before returning a modified view:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension<\/span> <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">modify<\/span>&lt;T: View&gt;<span class=\"hljs-params\">(@ViewBuilder <span class=\"hljs-number\">_<\/span> modifier: <span class=\"hljs-params\">(<span class=\"hljs-keyword\">Self<\/span>)<\/span><\/span><\/span> -&gt; <span class=\"hljs-type\">T<\/span>) -&gt; some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-keyword\">return<\/span> modifier(<span class=\"hljs-keyword\">self<\/span>)\n    }\n}\n<\/code><\/pre><p>What is it good for? Combining view modifiers with platform availability checks!<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Hello, world!\"<\/span>)\n        .modify {\n            <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n                $<span class=\"hljs-number\">0<\/span>.textCase(.uppercase)\n            } <span class=\"hljs-keyword\">else<\/span> {\n                $<span class=\"hljs-number\">0<\/span> <span class=\"hljs-comment\">\/\/ watchOS 6 fallback<\/span>\n            }\n        }\n    }\n}\n<\/code><\/pre><p>You can really go nuts with it if you're so inclined…<\/p><pre data-language=\"swift\"><code><span class=\"hljs-type\">Picker<\/span>(<span class=\"hljs-string\">\"Pick One\"<\/span>, selection: $option) {\n    ...\n}\n.modify {\n    #<span class=\"hljs-keyword\">if<\/span> os(watchOS)\n        <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n            $<span class=\"hljs-number\">0<\/span>.pickerStyle(<span class=\"hljs-type\">InlinePickerStyle<\/span>())\n        } <span class=\"hljs-keyword\">else<\/span> { \n            $<span class=\"hljs-number\">0<\/span>.pickerStyle(<span class=\"hljs-type\">DefaultPickerStyle<\/span>())\n        }\n    #elseif targetEnvironment(macCatalyst)\n        $<span class=\"hljs-number\">0<\/span>.pickerStyle(<span class=\"hljs-type\">DefaultPickerStyle<\/span>())\n    #<span class=\"hljs-keyword\">else<\/span> \n        $<span class=\"hljs-number\">0<\/span>.pickerStyle(<span class=\"hljs-type\">WheelPickerStyle<\/span>())\n    #endif\n}\n<\/code><\/pre><h2>Why do we need this?<\/h2><p>iOS 14, watchOS 7, and macOS 11 have brought major updates to SwiftUI. If you have an app that supports older OS versions, then you probably very familiar with <code>#available<\/code>:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n    <span class=\"hljs-comment\">\/\/ the new hotness<\/span>\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-comment\">\/\/ old and busted<\/span>\n}\n<\/code><\/pre><p>Unfortunately, doing availability checks with SwiftUI's declarative syntax can be a little messy. In case you haven't tried it, let's look at an example for watchOS.<\/p><p>Here's a very basic watchOS view, written for watchOS 6:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">List<\/span> {\n            <span class=\"hljs-type\">ToolbarView<\/span>()\n            \n            <span class=\"hljs-type\">ForEach<\/span>(<span class=\"hljs-number\">0<\/span>..&lt;<span class=\"hljs-number\">10<\/span>) { i <span class=\"hljs-keyword\">in<\/span>\n                <span class=\"hljs-type\">NavigationLink<\/span>(destination: <span class=\"hljs-type\">DetailView<\/span>(index: i)) {\n                    <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n                }\n            }\n        }\n    }\n}\n<\/code><\/pre><p>SwiftUI 2 added support for toolbars on all platforms, which we should use instead of shoving <code>ToolbarView()<\/code> into the top of the <code>List<\/code>. Here's what that looks like <em>without<\/em> support for watchOS 6:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">List<\/span> {\n            <span class=\"hljs-type\">ForEach<\/span>(<span class=\"hljs-number\">0<\/span>..&lt;<span class=\"hljs-number\">10<\/span>) { i <span class=\"hljs-keyword\">in<\/span>\n                <span class=\"hljs-type\">NavigationLink<\/span>(destination: <span class=\"hljs-type\">DetailView<\/span>(index: i)) {\n                    <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n                }\n            }\n        }\n        .toolbar { <span class=\"hljs-comment\">\/\/ error: toolbar requries watchOS 7<\/span>\n            <span class=\"hljs-type\">ToolbarView<\/span>()\n        }\n    }\n}\n<\/code><\/pre><p>To also support watchOS 6, it would be nice if we could wrap the differences between these code blocks in <code>if #available<\/code> like so:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">List<\/span> {\n            <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n                <span class=\"hljs-comment\">\/\/ use .toolbar() below<\/span>\n            } <span class=\"hljs-keyword\">else<\/span> {\n                <span class=\"hljs-type\">ToolbarView<\/span>()\n            }\n            \n            <span class=\"hljs-type\">ForEach<\/span>(<span class=\"hljs-number\">0<\/span>..&lt;<span class=\"hljs-number\">10<\/span>) { i <span class=\"hljs-keyword\">in<\/span>\n                <span class=\"hljs-type\">NavigationLink<\/span>(destination: <span class=\"hljs-type\">DetailView<\/span>(index: i)) {\n                    <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) { <span class=\"hljs-comment\">\/\/ error<\/span>\n            .toolbar {\n                <span class=\"hljs-type\">ToolbarView<\/span>()\n            }\n        }\n    }\n}\n<\/code><\/pre><p>Alas, this code won't compile. The first use of <code>if #available<\/code> is good but the second — attempting to wrap the <code>.toolbar()<\/code> view modifier — does not work. We would need to wrap an <code>if-else<\/code> around the <em>entire<\/em> <code>List<\/code>, which means either duplicating a lot of code or refactoring our view. This is a simple example, but I'm sure you can imagine how ugly this can get for more complex views.<\/p><p>Why isn't there a better way?!<\/p><h2>Inspiration: Conditional view modifier<\/h2><p>You may have seen <a href=\"https:\/\/fivestars.blog\/swiftui\/conditional-modifiers.html\">Federico Zanetello's Conditional View Modifier<\/a>, which takes a conditional and a closure as input:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension<\/span> <span class=\"hljs-title\">View<\/span> <\/span>{\n    @<span class=\"hljs-type\">ViewBuilder<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> `<span class=\"hljs-title\">if<\/span>`&lt;Transform: View&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">_<\/span> condition: Bool, \n                                 transform: <span class=\"hljs-params\">(<span class=\"hljs-keyword\">Self<\/span>)<\/span><\/span><\/span> -&gt; <span class=\"hljs-type\">Transform<\/span>) -&gt; some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-keyword\">if<\/span> condition {\n            transform(<span class=\"hljs-keyword\">self<\/span>)\n        } <span class=\"hljs-keyword\">else<\/span> {\n            <span class=\"hljs-keyword\">self<\/span>\n        }\n    }\n}\n<\/code><\/pre><p>This lets us <em>optionally<\/em> apply a view modifier, which is great for view modifiers that don't take any input, e.g.:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n.<span class=\"hljs-keyword\">if<\/span>(i &lt; <span class=\"hljs-number\">5<\/span>) { \n    $<span class=\"hljs-number\">0<\/span>.hidden() \n}\n<\/code><\/pre><p>Unfortunately, as Federico explains, this trick won't work for availability checks:<\/p><blockquote>\n<ul>\n<li>Swift’s #available and @available cannot be passed as arguments in our if modifier<\/li>\n<li>we can’t guarantee the compiler that our transform function would be applied only on iOS 14\/13.4 and later<\/li>\n<\/ul>\n<p>If you find a way, I would love to know!<\/p>\n<\/blockquote><p>Well Federico, I think I found a way.<\/p><h2>Closure view modifier<\/h2><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension<\/span> <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">modify<\/span>&lt;T: View&gt;<span class=\"hljs-params\">(@ViewBuilder <span class=\"hljs-number\">_<\/span> modifier: <span class=\"hljs-params\">(<span class=\"hljs-keyword\">Self<\/span>)<\/span><\/span><\/span> -&gt; <span class=\"hljs-type\">T<\/span>) -&gt; some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-keyword\">return<\/span> modifier(<span class=\"hljs-keyword\">self<\/span>)\n    }\n}\n<\/code><\/pre><p>My solution omits the conditional and applies <code>@ViewBuilder<\/code> to the closure, which will allow us to define our own <code>if-else<\/code> inside the closure:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">List<\/span> {\n            <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n                <span class=\"hljs-comment\">\/\/ use .toolbar() below<\/span>\n            } <span class=\"hljs-keyword\">else<\/span> {\n                <span class=\"hljs-type\">ToolbarView<\/span>()\n            }\n            \n            <span class=\"hljs-type\">ForEach<\/span>(<span class=\"hljs-number\">0<\/span>..&lt;<span class=\"hljs-number\">10<\/span>) { i <span class=\"hljs-keyword\">in<\/span>\n                <span class=\"hljs-type\">NavigationLink<\/span>(destination: <span class=\"hljs-type\">DetailView<\/span>(index: i)) {\n                    <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n                        \n                }\n            }\n        }\n        .modify {\n            <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n                $<span class=\"hljs-number\">0<\/span>.toolbar {\n                    <span class=\"hljs-type\">ToolbarView<\/span>()\n                }\n            } <span class=\"hljs-keyword\">else<\/span> {\n                $<span class=\"hljs-number\">0<\/span>\n            }\n        }\n    }\n}\n<\/code><\/pre><p>It may not be pretty, but it works.<\/p><p>(If you do find a more elegant solution, please <a href=\"https:\/\/twitter.com\/aoverholtzer\">let me know<\/a>.)<\/p>]]><\/content:encoded><\/item><\/channel><\/rss>"}