{"itemCount":1,"config":{"ttlInterval":250,"maximumItemCount":100,"targetPath":"feed.rss"},"feed":"<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:atom=\"http:\/\/www.w3.org\/2005\/Atom\" xmlns:content=\"http:\/\/purl.org\/rss\/1.0\/modules\/content\"><channel><title>overdesigned blog<\/title><description>A blog by Adam Overholtzer<\/description><link>https:\/\/blog.overdesigned.com<\/link><language>en<\/language><lastBuildDate>Wed, 23 Sep 2020 15:20:01 -0700<\/lastBuildDate><pubDate>Wed, 23 Sep 2020 15:20:01 -0700<\/pubDate><ttl>250<\/ttl><atom:link href=\"https:\/\/blog.overdesigned.com\/feed.rss\" rel=\"self\" type=\"application\/rss+xml\"\/><item><guid isPermaLink=\"true\">https:\/\/blog.overdesigned.com\/posts\/2020-09-23-swiftui-availability<\/guid><title>SwiftUI View Modifiers and if #available<\/title><description>Doing availability checks with SwiftUI's declarative syntax can be a little messy. Here's a custom view modifier that can help.<\/description><link>https:\/\/blog.overdesigned.com\/posts\/2020-09-23-swiftui-availability<\/link><pubDate>Wed, 23 Sep 2020 09:41:00 -0700<\/pubDate><content:encoded><![CDATA[<h1>SwiftUI View Modifiers and <code>if #available<\/code><\/h1><h2>tl;dr<\/h2><p>Here is a view modifier that lets you run arbitrary code before returning a modified view:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension<\/span> <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">modify<\/span>&lt;T: View&gt;<span class=\"hljs-params\">(@ViewBuilder <span class=\"hljs-number\">_<\/span> modifier: <span class=\"hljs-params\">(<span class=\"hljs-keyword\">Self<\/span>)<\/span><\/span><\/span> -&gt; <span class=\"hljs-type\">T<\/span>) -&gt; some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-keyword\">return<\/span> modifier(<span class=\"hljs-keyword\">self<\/span>)\n    }\n}\n<\/code><\/pre><p>What is it good for? Why, platform availability checks!<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Hello, world!\"<\/span>)\n            .modify {\n                <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n                    $<span class=\"hljs-number\">0<\/span>.textCase(.uppercase)\n                } <span class=\"hljs-keyword\">else<\/span> {\n                    $<span class=\"hljs-number\">0<\/span>\n                }\n            }\n    }\n}\n<\/code><\/pre><h2>Why do we need this?<\/h2><p>iOS 14, watchOS 7, and macOS 11 have brought major updates to SwiftUI. If you have an app that supports older OS versions, then you probably very familiar with <code>#available<\/code>:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n    <span class=\"hljs-comment\">\/\/ the new hotness<\/span>\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-comment\">\/\/ old and busted<\/span>\n}\n<\/code><\/pre><p>Unfortunately, doing availability checks with SwiftUI's declarative syntax can be a little messy. Let's look at an example for watchOS.<\/p><p>Here's a very basic watchOS view, written for watchOS 6:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">List<\/span> {\n            <span class=\"hljs-type\">ToolbarView<\/span>()\n            \n            <span class=\"hljs-type\">ForEach<\/span>(<span class=\"hljs-number\">0<\/span>..&lt;<span class=\"hljs-number\">10<\/span>) { i <span class=\"hljs-keyword\">in<\/span>\n                <span class=\"hljs-type\">NavigationLink<\/span>(destination: <span class=\"hljs-type\">DetailView<\/span>(index: i)) {\n                    <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n                }\n            }\n        }\n    }\n}\n<\/code><\/pre><p>WatchOS 7 added support for toolbars on all platforms, which we should use instead of shoving ToolbarView() into the top of the List.<\/p><p>In case you're not familiar with the <code>.toolbar()<\/code> view modifier, here is an implementation that does <em>not<\/em> support watchOS 6:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">List<\/span> {\n            <span class=\"hljs-type\">ForEach<\/span>(<span class=\"hljs-number\">0<\/span>..&lt;<span class=\"hljs-number\">10<\/span>) { i <span class=\"hljs-keyword\">in<\/span>\n                <span class=\"hljs-type\">NavigationLink<\/span>(destination: <span class=\"hljs-type\">DetailView<\/span>(index: i)) {\n                    <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n                }\n            }\n        }\n        .toolbar { <span class=\"hljs-comment\">\/\/ error: toolbar requries watchOS 7<\/span>\n            <span class=\"hljs-type\">ToolbarView<\/span>()\n        }\n    }\n}\n<\/code><\/pre><p>To also support watchOS 6, it would be nice if we could wrap the differences in <code>if #available<\/code> like so:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">List<\/span> {\n            <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n                <span class=\"hljs-comment\">\/\/ use .toolbar() below<\/span>\n            } <span class=\"hljs-keyword\">else<\/span> {\n                <span class=\"hljs-type\">ToolbarView<\/span>()\n            }\n            \n            <span class=\"hljs-type\">ForEach<\/span>(<span class=\"hljs-number\">0<\/span>..&lt;<span class=\"hljs-number\">10<\/span>) { i <span class=\"hljs-keyword\">in<\/span>\n                <span class=\"hljs-type\">NavigationLink<\/span>(destination: <span class=\"hljs-type\">DetailView<\/span>(index: i)) {\n                    <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) { <span class=\"hljs-comment\">\/\/ error<\/span>\n            .toolbar {\n                <span class=\"hljs-type\">ToolbarView<\/span>()\n            }\n        }\n    }\n}\n<\/code><\/pre><p>Alas, this code won't compile. The first use of <code>if #available<\/code> is good but the second — attempting to wrap the <code>.toolbar()<\/code> view modifier — is no good. We would need to wrap an <code>if-else<\/code> around the <em>entire<\/em> <code>List<\/code>, which means either duplicating a lot of code or refactoring our view. This is a simple example, but I'm sure you can imagine how ugly this can get for more complex views.<\/p><p>Why isn't there a better way?!<\/p><h2>Inspiration: Conditional view modifier<\/h2><p>You may have seen <a href=\"https:\/\/fivestars.blog\/swiftui\/conditional-modifiers.html\">Federico Zanetello's Conditional View Modifier<\/a>, which takes a conditional and a closure as input:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension<\/span> <span class=\"hljs-title\">View<\/span> <\/span>{\n    @<span class=\"hljs-type\">ViewBuilder<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> `<span class=\"hljs-title\">if<\/span>`&lt;Transform: View&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">_<\/span> condition: Bool, \n                                 transform: <span class=\"hljs-params\">(<span class=\"hljs-keyword\">Self<\/span>)<\/span><\/span><\/span> -&gt; <span class=\"hljs-type\">Transform<\/span>) -&gt; some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-keyword\">if<\/span> condition {\n            transform(<span class=\"hljs-keyword\">self<\/span>)\n        } <span class=\"hljs-keyword\">else<\/span> {\n            <span class=\"hljs-keyword\">self<\/span>\n        }\n    }\n}\n<\/code><\/pre><p>This lets us <em>optionally<\/em> apply a view modifier, which is great for view modifiers that don't take any input:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n    .<span class=\"hljs-keyword\">if<\/span>(i &lt; <span class=\"hljs-number\">5<\/span>) { \n        $<span class=\"hljs-number\">0<\/span>.hidden() \n    }\n<\/code><\/pre><p>Unfortunately, as Federico explains, this trick won't work for availability checks:<\/p><blockquote>\n<ul>\n<li>Swift’s #available and @available cannot be passed as arguments in our if modifier<\/li>\n<li>we can’t guarantee the compiler that our transform function would be applied only on iOS 14\/13.4 and later<\/li>\n<\/ul>\n<p>If you find a way, I would love to know!<\/p>\n<\/blockquote><p>Well Federico, I found a way!<\/p><h2>Closure view modifier<\/h2><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension<\/span> <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">modify<\/span>&lt;T: View&gt;<span class=\"hljs-params\">(@ViewBuilder <span class=\"hljs-number\">_<\/span> modifier: <span class=\"hljs-params\">(<span class=\"hljs-keyword\">Self<\/span>)<\/span><\/span><\/span> -&gt; <span class=\"hljs-type\">T<\/span>) -&gt; some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-keyword\">return<\/span> modifier(<span class=\"hljs-keyword\">self<\/span>)\n    }\n}\n<\/code><\/pre><p>My solution omits the conditional and applies <code>@ViewBuilder<\/code> to the closure, which will allow us to define our own <code>if-else<\/code> inside the closure:<\/p><pre data-language=\"swift\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct<\/span> <span class=\"hljs-title\">ContentView<\/span>: <span class=\"hljs-title\">View<\/span> <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> body: some <span class=\"hljs-type\">View<\/span> {\n        <span class=\"hljs-type\">List<\/span> {\n            <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n                <span class=\"hljs-comment\">\/\/ use .toolbar() below<\/span>\n            } <span class=\"hljs-keyword\">else<\/span> {\n                <span class=\"hljs-type\">ToolbarView<\/span>()\n            }\n            \n            <span class=\"hljs-type\">ForEach<\/span>(<span class=\"hljs-number\">0<\/span>..&lt;<span class=\"hljs-number\">10<\/span>) { i <span class=\"hljs-keyword\">in<\/span>\n                <span class=\"hljs-type\">NavigationLink<\/span>(destination: <span class=\"hljs-type\">DetailView<\/span>(index: i)) {\n                    <span class=\"hljs-type\">Text<\/span>(<span class=\"hljs-string\">\"Button \\(i)\"<\/span>)\n                        \n                }\n            }\n        }\n        .modify {\n            <span class=\"hljs-keyword\">if<\/span> #available(watchOS <span class=\"hljs-number\">7<\/span>, *) {\n                $<span class=\"hljs-number\">0<\/span>.toolbar {\n                    <span class=\"hljs-type\">ToolbarView<\/span>()\n                }\n            } <span class=\"hljs-keyword\">else<\/span> {\n                $<span class=\"hljs-number\">0<\/span>\n            }\n        }\n    }\n}\n<\/code><\/pre><p>That may not be pretty, but it works!<\/p><p>(If you find a more elegant solution, please <a href=\"https:\/\/twitter.com\/aoverholtzer\">let me know<\/a>.)<\/p>]]><\/content:encoded><\/item><\/channel><\/rss>"}